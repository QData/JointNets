JointNets::plot.fasjem(result,  type = "share", layout = layout)
JointNets::plot.fasjem(result,
type = "taskspecific",
subID = 1,
layout = layout)
JointNets::plot.fasjem(result,
type = "taskspecific",
subID = 2,
layout = layout)
}
library(JointNets)
demo(fasjem)
library(JointNets)
demo(wsimule)
library(JointNets)
demo(wsimule)
library(JointNets)
demo(wsimule)
library(JointNets)
data(ABIDE_aal116_timeseries)
label = colnames(ABIDE_aal116_timeseries[[1]])
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
document()
library(JointNets)
data(ABIDE_aal116_timeseries)
label = colnames(ABIDE_aal116_timeseries[[1]])
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
data(ABIDE_aal116_timeseries)
label = colnames(ABIDE_aal116_timeseries[[1]])
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
document()
library(JointNets)
data(ABIDE_aal116_timeseries)
label = colnames(ABIDE_aal116_timeseries[[1]])
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
color = as.integer(aal116coordinates$lobe)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
docu
document()
library(JointNets)
data(ABIDE_aal116_timeseries)
label = colnames(ABIDE_aal116_timeseries[[1]])
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
demo(simule)
title(ifelse(hasArg('main'), args$main, title),
cex.main = 2,   font.main= 4, col.main= "blue"
)
library(JointNets)
demo(simule)
library(JointNets)
demo(simule)
library(JointNets)
demo(simule)
misc3d::contour3d(
neurobase::readnii(
system.file("MNI152_T1_1mm_brain.nii.gz", package = "brainR"),
reorient = FALSE
),
level = 3000,
alpha = 0.5,
draw = TRUE,
add = FALSE,
rescale = FALSE
)
a = neurobase::readnii(
system.file("MNI152_T1_1mm_brain.nii.gz", package = "brainR"),
reorient = FALSE
)
matrix(0, 1, 20)
devtools::document()
library(JointNets)
length(result[[1]])
length(result$graphs[[1]])
dim(result$graphs[[1]])
dim(result$graphs[[1]])[1]
devtools::document()
devtools::document()
library(JointNets)
generateSamples(result@graphs[[1]])
generateSamples(result$graphs[[1]])
library(JointNets)
generateSamples(result$graphs[[1]])
library(JointNets)
generateSamples(result$graphs[[1]])
test =generateSamples(result$graphs[[1]])
View(test)
simulateGraph()
test = simulateGraph()
test = simulateGraph()
test[[3]]
library(JointNets)
devtools::document()
list()
a = list()
a[1] = 1
a[[1]] = 1
a[[2]] = 1
library(JointNets)
devtools::document()
library(JointNets)
simulate = simulateGraph()
library(JointNets)
simulate = simulateGraph()
simulationsamples = generateSampleList(simulate, c(100,100))
library(JointNets)
simulationsamples = generateSampleList(simulate, c(100,100))
result = simule(
X = simulationsamples,
lambda = 0.1,
epsilon = 0.45,
covType = "cov",
TRUE
)
comparisonplot(simulate,result)
library(JointNets)
comparisonplot(simulate,result)
library(JointNets)
comparisonplot(simulate,result)
library(JointNets)
comparisonplot(simulate,result)
library(JointNets)
comparisonplot(simulate,result)
class(result)
paste("a","b","aa")
library(JointNets)
comparisonplot(simulate,result)
library(JointNets)
comparisonplot(simulate,result)
test = make_adj_matrix(result)
cat("hello")
library(JointNets)
cat(paste("BIC score is",BIC(result$graphs,100,20)))
cat(paste("F1 score is", F1(simulate,result)))
devtools::document()
library(JointNets)
cat(paste("BIC score is",BIC(result$graphs,100,20)))
library(JointNets)
cat(paste("BIC score is",BIC(result$graphs,100,20)))
cat(paste("F1 score is", F1(simulate,result)))
library(JointNets)
cat(paste("F1 score is", F1(simulate,result)))
a = c()
library(JointNets)
cat(paste("F1 score is", F1(simulate,result)))
F1(simulate,result)
cat(paste("F1 score is", F1(simulate,result)))
library(JointNets)
cat(paste("F1 score is", F1(simulate,result)))
simulate = make_adj_matrix(simulate)
demo(evaluation)
setwd("C:/Users/Karen Chen/Desktop")
neurobase::readnii("Caltech_0051456_func_preproc.nii.gz")
niidata = neurobase::readnii("Caltech_0051456_func_preproc.nii.gz")
data("raal_mask_pad.nii")
library(JointNets)
data("raal_mask_pad.nii")
data("raal_mask_pad")
mask = neurobase::readnii("raal_mask_pad.nii")
mask = mask@.Data
max(mask)
data("aal116coordinates")
aal116coordinates@index
aal116coordinates$index
read.csv("aal_labels")
read.csv("aal_labels.csv")
read.csv("aal_labels.csv", header = FALSE)
number = read.csv("aal_labels.csv", header = FALSE)
number =  as.matrix(read.csv("aal_labels.csv", header = FALSE))
View(number)
number =  as.matrix(read.csv("aal_labels.csv", header = FALSE))[,1]
number
number = number[3:]
number = number[-1:-2]
number = as.numeric(number)
dim(niidata@.Data)
dim(niidata@.Data)[4]
test = niidata@.Data[,,,1]
devtools::document()
setwd
setwd(E:/Github/JoineNets/JointNets)
setwd(E:Github/JoineNets/JointNets)
getwd()
setwd(E:/Github/JoineNets/JointNets)
setwd("E:/Github/JoineNets/JointNets")
setwd("E:/Github/JoineNets/JointNets")
library(JointNets)
library(devtools)
document()
setwd("C:/Users/Karen Chen/Desktop")
niidata = neurobase::readnii("Caltech_0051456_func_preproc.nii.gz")
mask = neurobase::readnii("raal_mask_pad.nii")
number = as.matrix(read.csv("aal_labels.csv", header = FALSE))[,1]
number = number[-1:-2]
number = as.numeric(number)
datalist = convert_nii_to_datalist(niidata,mask,number)
setwd("E:/Github/JointNets/JointNets")
document()
library(JointNets)
setwd("C:/Users/Karen Chen/Desktop")
niidata = neurobase::readnii("Caltech_0051456_func_preproc.nii.gz")
mask = neurobase::readnii("raal_mask_pad.nii")
number = as.matrix(read.csv("aal_labels.csv", header = FALSE))[,1]
number = number[-1:-2]
number = as.numeric(number)
datalist = convert_nii_to_datalist(niidata,mask,number)
demo(evaluation)
setwd("E:/Github/JointNets/JointNets")
document()
n = c(1,2,3)
dim(n)
lenght(n)
length(n)
a = list(graphs = 1,share = NULL)
rownames(a$share) <- "1"
View(simulate)
list(matrix(0,10,10))
a = list(matrix(0,10,10))
a[[1]]
colnames(a[[1]])
result
result$graphs[[1]]
make_adj_matrix(result)
test = abs(result) > 0
test = abs(result$graphs) > 0
test = abs(result$graphs[[1]]) > 0
View(test)
test = make_adj_matrix(result,TRUE)
library(JointNets)
F1(simulate,result)
length(exampleData[[1]])
dim(exampleData[[1]])
dim(exampleData[[1]])[1]
comparisonplot(simulate,result)
library(JointNets)
cat(paste("BIC score is",BIC(simulationsamples,result)))
library(JointNets)
demo(diffee
)
make_adj_matrix(result)
document()
library(JointNets)
demo(diffee)
make_adj_matrix(result)
test = result$graphs
length(test)
test = list(test)
document()
library(JointNets)
demo(diffee)
demo(simule)
demo(jeek)
lenght(c(1,2,3))
length(c(1,2,3))
print(a)
print(b)
print("hellp")
print(list("a","b"))
document()
document()
document()
demo(evaluation)
document()
library(JointNets)
demo(evaluation)
document()
library(JointNets)
document()
library(JointNets)
demo(evaluation)
library(JointNets)
demo(simulation)
demo(evaluation)
simulate$graphs
test = simulate$graphs
library(JointNets)
demo(evaluation)
library(JointNets)
demo(evaluation)
test = c()
test[1]= 2
test[2]= 3
library(JointNets)
demo(evaluation)
c(1:3)
print(c(1:3))
library(JointNets)
demo(evaluation)
library(JointNets)
demo(evaluation)
library(JointNets)
demo(evaluation)
library(JointNets)
demo(evaluation)
!is.null(result$share)
library(JointNets)
library(JointNets)
demo(evaluation)
result = jeek(X = samples,
0.3,
covType = "cov",
parallel = TRUE)
evaluation(result,simulate)
result = diffee(samples[[1]], samples[[2]], 0.45)
evaluation(result,simulate)
demo(brain)
library(JointNets)
demo(brain)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
par3d(ask=F)
par3d()
par3d()
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
plot.new()
par(ask=F)
plot.new()
legend("a")
legend(legend = "a")
legend("topright",legend = "a" )
legend3d("topright",legend = "a" )
library(JointNets)
legend3d("topright",legend = "a" )
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
open3d()
open3d()
open3d()
open3d()
library(brainKCCA)
result<-permkCCA_multipleRegion(imageDat = "preproc_con21_rest_MNI_2mm",
region = c(1,5,10), col="green")
multipleRegion_plot(result, view="axial")
simulate$graphs$graphs
simulate$graphs$share
library(JointNets)
demo(brain)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
bgplot3d({
plot.new()
title(main = 'This is the main title', line = 3)
mtext(side = 1, 'This is a subtitle', line = 4)
# use here any other way you fancy to write your title
})
plot.new()
?plot.new()
bgplot3d({
plot.new()
})
bgplot3d({
})
bgplot3d({
})
text3d(20, adj = c(0.5, 0.5), y = NULL, z = NULL, texts = title)
text3d(20, adj = c(0.5, 0.5), y = NULL, z = NULL, texts = "heelo")
text3d( adj = c(0.5, 0.5), y = NULL, z = NULL, texts = "heelo")
text3d(20, adj = c(0.5, 1), y = NULL, z = NULL, texts = "heelo")
text3d(20, adj = c(0.5, 20), y = NULL, z = NULL, texts = "heelo")
text3d(20, adj = c(0.5, 20), y = NULL, z = NULL, texts = "heelo", add = FALSE)
?title3d()
rgl.cur()
rgl::open3d()
rgl.cur()
rgl.quit()
rgl.cur
rgl.cur()
rgl::rgl.cur()
rgl::rgl.close()
rgl::open3d()
rgl::title3d(main="heelo")
library(rgl)
rgl.dev.list()
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
open3d()
cols <- rainbow(7)
layout3d(matrix(1:16, 4,4), heights=c(1,3,1,3))
text3d(0,0,0,"tetrahedron3d"); next3d()
shade3d(tetrahedron3d(col=cols[1])); next3d()
library(JointNets)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
### print to rstudio viewer panel
options(rgl.printRglwidget = FALSE)
{
open3d()
cols <- rainbow(7)
layout3d(matrix(1:16, 4,4), heights=c(1,3,1,3))
text3d(0,0,0,"tetrahedron3d"); next3d()
shade3d(tetrahedron3d(col=cols[1])); next3d()
legend3d(
"topright" ,
legend = "heelo"
); next3d()
}
{
with(iris, plot3d(Sepal.Length, Sepal.Width, Petal.Length,
type="s", col=as.numeric(Species)))
legend3d(
"topright" ,
legend = "hello"
)
}
?par()
{
par(ask=FALSE)
with(iris, plot3d(Sepal.Length, Sepal.Width, Petal.Length,
type="s", col=as.numeric(Species)))
legend3d(
"topright" ,
legend = "hello"
)
}
?legend3d()
legend("topright", legend = "hello")
legend3d("topright", legend = "hello")
library('devtools')
install.packages('devtools')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(JointNets)
library(JointNets)
simulate = simulation(n = c(100,100))
AUC(simulate,"simule",seq(0,0.3, by=0.01),parallel = TRUE)
library(JointNets)
AUC(simulate,"simule",seq(0,0.3, by=0.01),parallel = TRUE)
library(JointNets)
AUC(simulate,"simule",seq(0,0.3, by=0.01),parallel = TRUE)
AUC(simulate,"simule",seq(0,1, by=0.5),parallel = TRUE)
library(JointNets)
AUC(simulate,"simule",seq(0,1, by=0.05),parallel = TRUE)
