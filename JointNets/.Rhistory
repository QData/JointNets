truth = make_adj_matrix(truth,TRUE)
difference = abs(truth[[1]] - truth[[2]])
View(difference)
result$graphs
# diffee (difference)
result = diffee(simulateresult$simulatedsamples[[1]], simulateresult$simulatedsamples[[2]], 1)
result$graphs
# diffee (difference)
result = diffee(simulateresult$simulatedsamples[[1]], simulateresult$simulatedsamples[[2]], 0.1)
result$graphs
F1score = F1(result,truth)
simulateresult = simulation(p = 20,  n = c(100,100))
truth = simulateresult$simulatedgraphs
layout = layout_nicely(returngraph(truth), dim = 2)
result = simule(simulateresult$simulatedsamples, 0.2, 0.5, covType = "cov", TRUE) # simule
# diffee (difference)
result = diffee(simulateresult$simulatedsamples[[1]], simulateresult$simulatedsamples[[2]], 0.1)
F1score = F1(result,truth)
### BIC score
result1 = simule(simulateresult$simulatedsamples, 0.2, 0.5, covType = "cov", TRUE) # simule
result2 = jeek(simulateresult$simulatedsamples,
0.25,
covType = "kendall",
parallel = TRUE)
result3 = diffee(simulateresult$simulatedsamples[[1]], simulateresult$simulatedsamples[[2]], 0.1)
library(JointNets)
BIC(simulateresult$simulatedsamples,result1)
BIC(simulateresult$simulatedsamples,result2)
BIC(simulateresult$simulatedsamples,result3)
devtools::document()
library(JointNets)
BIC(simulateresult$simulatedsamples,result1)
BIC(simulateresult$simulatedsamples,result2)
BIC(simulateresult$simulatedsamples,result3)
?stats::BIC
library(JointNets)
graphics.off()
par(ask=F)
par(mfrow=c(1,1))
data(ABIDE_aal116_timeseries)
label = colnames(ABIDE_aal116_timeseries[[1]])
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
.softThre <- function(x, lambda){
result = sign(x) * pmax(abs(x)-lambda, 0)
result
}
.softThre <- function(x, lambda){
result = sign(x) * pmax(abs(x)-lambda, 0)
result
}
.softThre(matrix(1,20,20),0.001)
det(.softThre(matrix(1,20,20),0.001))
.softThre <- function(x, lambda){
result = sign(x) * pmax(abs(x)-lambda, 0)
return(result)
}
det(.softThre(matrix(1,20,20),0.001))
.softThre(matrix(1,20,20),0.001)
devtools::document()
simulationresult = simulation(n=c(100,100,100))
AUC_result = AUC(simulationresult,lambdas = seq(0.1,2,0.05),epsilon = 2)
AUC_result
plot(AUC_result$fPM,AUC_result$tPM)
simulateresult = simulation(p = 20,  n = c(100,100))
result = simule(simulateresult$simulatedsamples, 0.2, 0.5, covType = "cov", TRUE)
BIC(simulateresult$simulatedsamples,result)
result3 = diffee(simulateresult$simulatedsamples[[1]], simulateresult$simulatedsamples[[2]], 0.1)
BIC(simulateresult$simulatedsamples,result3)
simulateresult = simulation(p = 20,  n = c(100,100))
result = simule(simulateresult$simulatedsamples, 0.2, 0.5, covType = "cov", TRUE)
library(JointNets)
devtools::document()
library(JointNets)
simulationresult = simulation(p = 20,  n = c(100,100))
result = simule(simulationresult$simulationresultdsamples, 0.2, 0.5, covType = "cov", TRUE)
result = simule(simulationresult$simulatedsamples, 0.2, 0.5, covType = "cov", TRUE)
comparisonplot(result,simulationresult$graphs)
devtools::document()
library(JointNets)
simulationresult = simulation(p = 20,  n = c(100,100))
result = simule(simulationresult$simulatedsamples, 0.2, 0.5, covType = "cov", TRUE)
comparisonplot(result,simulationresult$graphs)
plot(
simulationresult$simulatedgraphs,
type = "taskspecific",
neighbouroption = "task",
subID = 1
)
graphics.off()
par(ask = F)
par(mfrow = c(1, 1))
plot(
simulationresult$simulatedgraphs,
type = "taskspecific",
neighbouroption = "task",
subID = 1
)
comparisonplot(result,simulationresult)
devtools::document()
library(JointNets)
library(JointNets)
simulationresult = simulation(p = 20,  n = c(100,100))
result = wsimule(simulationresult$simulatedsamples, 0.2, 1, W = matrix(1,26,26), covType = "cov", TRUE)
data(cancer)
cancerlist = list(as.matrix(cancer[[1]][which(cancer[[2]] == "not"), ]),
as.matrix(cancer[[1]][which(cancer[[2]] == "pcr"), ]))
result = wsimule(cancerlist, 0.2, 1, W = matrix(1,26,26), covType = "cov", TRUE)
library(JointNets)
simulationresult = simulation(p = 20,  n = c(100,100))
result = wsimule(simulationresult$simulatedsamples, 0.2, 1, W = matrix(1,20,20), covType = "cov", TRUE)
comparisonplot(result,simulationresult)
data(cancer)
cancerlist = list(as.matrix(cancer[[1]][which(cancer[[2]] == "not"), ]),
as.matrix(cancer[[1]][which(cancer[[2]] == "pcr"), ]))
result = wsimule(cancerlist, 0.2, 1, W = matrix(1,26,26), covType = "cov", TRUE)
label = colnames(cancer[[1]])
graph = returngraph(result)
layout = layout_nicely(graph, dim = 2)
{
par(mfrow = c(2, 2))
plot(result, type = "task", layout = layout)
plot(result, type = "share", layout = layout)
plot(result,
type = "taskspecific",
subID = 1,
layout = layout)
plot(result,
type = "taskspecific",
subID = 2,
layout = layout)
}
par(mfrow = c(1, 1))
plot(result, type = "task", layout = layout)
plot(result, type = "task", layout = layout)
{
par(mfrow = c(2, 2))
plot(result, type = "task", layout = layout)
plot(result, type = "share", layout = layout)
plot(result,
type = "taskspecific",
subID = 1,
layout = layout)
plot(result,
type = "taskspecific",
subID = 2,
layout = layout)
}
plot(result, type = "task", layout = layout)
par(mfrow = c(1, 1))
plot(result, type = "task", layout = layout)
graphics::legend(
"topright" ,
inset = 0,
legend = "haha",
lty = 1,
cex = 0.7,
box.lty = 0
)
graphics::legend(
"topright" ,
inset = 1,
legend = "haha",
lty = 1,
cex = 0.7,
box.lty = 0
)
graphics::legend(
"topright" ,
inset = 0.5,
legend = "haha",
lty = 1,
cex = 0.7,
box.lty = 0
)
graphics::legend(
"topright" ,
inset = -0.1,
legend = "haha",
lty = 1,
cex = 0.7,
box.lty = 0
)
graphics::legend(
"topright" ,
inset = -0.1,
legend = "haha",
lty = 1,
cex = 2,
box.lty = 0
)
graphics::legend(
"topright" ,
inset = -0.1,
legend = "haha",
lty = 1,
cex = 0.7,
box.lty = 0
)
par("cex")
par(mfrow = c(2, 2))
par("cex")
library(JointNets)
simulationresult = simulation(p = 20,  n = c(100,100))
result = wsimule(simulationresult$simulatedsamples, 0.2, 1, W = matrix(1,20,20), covType = "cov", TRUE)
comparisonplot(result,simulationresult)
library(JointNets)
simulationresult = simulation(p = 20,  n = c(100,100))
result = fasjem(simulationresult$simulatedsamples, method = "fasjem-g", 2, 0.1, 0.1, 0.05, 20)
comparisonplot(result,simulationresult)
library(JointNets)
simulationresult = simulation(p = 20,  n = c(100,100))
result = jeek(simulationresult$simulatedsamples,0.25,covType = "kendall",parallel = TRUE)
comparisonplot(result,simulationresult)
library(JointNets)
simulationresult = simulation(p = 20,  n = c(100,100))
result = diffee(simulationresult$simulatedsamples[[1]], simulationresult$simulatedsamples[[2]], 1)
comparisonplot(result,simulationresult)
comparisonplot(result,simulationresult)
devtools::document()
library(JointNets)
comparisonplot.diffee()?
;
?comparisonplot.diffee()
library(JointNets)
simulationresult = simulation(p = 20,  n = c(100,100))
result = diffee(simulationresult$simulatedsamples[[1]], simulationresult$simulatedsamples[[2]], 1)
comparisonplot(result,simulationresult)
comparisonplot.diffee(result,simulationresult)
?comparisonplot.jeek
comparisonplot(result,simulationresult)
library(JointNets)
simulationresult = simulation(p = 20,  n = c(100,100))
result = jeek(simulationresult$simulatedsamples,0.25,covType = "kendall",parallel = TRUE)
comparisonplot(result,simulationresult)
comparisonplot.jeek(result,simulationresult)
comparisonplot(result,simulationresult)
result = diffee(simulationresult$simulatedsamples[[1]], simulationresult$simulatedsamples[[2]], 1)
comparisonplot.diffee(result,simulationresult)
comparisonplot(result,simulationresult)
plot(simulationresult$simulatedgraphs)
library(JointNets)
library(JointNets)
simulationresult = simulation(p = 20,  n = c(100,100))
result = diffee(simulationresult$simulatedsamples[[1]], simulationresult$simulatedsamples[[2]], 1)
comparisonplot(result,simulationresult)
[1,2]
[1:2]
library(JointNets)
comparisonplot(result,simulationresult)
library(JointNets)
comparisonplot(result,simulationresult)
library(JointNets)
data(exampleData)
result = diffee(exampleData[[1]], exampleData[[2]], 0.45)
plot(result)
graphics.off()
par(ask = F)
par(mfrow = c(1, 1))
library(JointNets)
data(exampleData)
result = diffee(exampleData[[1]], exampleData[[2]], 0.45)
plot(result)
simulateresult = simulation(p = 20,  n = c(100,100))
truth = simulateresult$simulatedgraphs
result = simule(simulateresult$simulatedsamples, 0.2, 0.5, covType = "cov", TRUE)
F1score = F1(result,truth)
F1(result,truth)
simulationresult = simulation(p = 20,  n = c(100,100))
truth = simulationresult$simulatedgraphs
result = simule(simulationresult$simulatedsamples, 0.2, 0.5, covType = "cov", TRUE)
F1(result,truth)
simulationresult = simulation(p = 20,  n = c(100,100))
truth = simulationresult$simulatedgraphs
result = wsimule(simulationresult$simulatedsamples, 0.2, 1, W = matrix(1,20,20), covType = "cov", TRUE)
F1(result,truth)
simulationresult = simulation(p = 20,  n = c(100,100))
truth = simulationresult$simulatedgraphs
result = jeek(simulationresult$simulatedsamples,0.25,covType = "kendall",parallel = TRUE)
F1(result,truth)
simulationresult = simulation(p = 20,  n = c(100,100))
truth = simulationresult$simulatedgraphs
result = fasjem(simulationresult$simulatedsamples, method = "fasjem-g", 2, 0.1, 0.1, 0.05, 20)
F1(result,truth)
simulationresult = simulation(p = 20,  n = c(100,100))
truth = simulationresult$simulatedgraphs
result = diffee(simulationresult$simulatedsamples[[1]], simulationresult$simulatedsamples[[2]], 1)
F1(result,truth)
simulationresult = simulation(p = 20,  n = c(100,100))
truth = simulationresult$simulatedgraphs
result = diffee(simulationresult$simulatedsamples[[1]], simulationresult$simulatedsamples[[2]], 0.01)
F1(result,truth)
library(JointNets)
data(exampleData)
result = fasjem(X = exampleData, method = "fasjem-g", 0.5, 0.1, 0.1, 0.05, 10)
plot(result)
library(JointNets)
data(exampleData)
result = jeek(X = exampleData, 0.3, covType = "cov", parallel = TRUE)
plot(result)
?neurobase::readnii()
fname = system.file(
file.path("nifti", "mniRL.nii.gz"),
package = "oro.nifti")
eve = readnii(fname)
eve = oro.nifti::readnii(fname)
eve = neurobase::readnii(fname)
getwd()
setwd("/Users/ouchouyang/Desktop")
eve = neurobase::readnii("OHSU_0050147_func_minimal.nii")
data = eve@.Data
data[,,,1]
slice = data[,,,1]
size(data)
length(data)
dim(data)
dim(data)[4]
fname = system.file(
file.path("nifti", "mniRL.nii.gz"),
package = "oro.nifti")
eve = readnii(fname)
data = eve@.Data
dim(data)[4]
data = eve@.Data
fname = system.file(
file.path("nifti", "mniRL.nii.gz"),
package = "oro.nifti")
eve = readnii(fname)
eve = neurobase::readnii(fname)
data = eve@.Data
dim(data)[4]
setwd("/Users/ouchouyang/Desktop")
data = neurobase::readnii("OHSU_0050147_func_minimal.nii")
data = data@.Data
atlas = neurobase::readnii("aal_roi_atlas.nii")
atlas = atlas@.Data
max(atlas)
unique(atlas)
unique(atlas)
c(atlas)
unique(c(atlas))
order(unique(c(atlas)))
sort(unique(c(atlas)))
areas = sort(unique(c(atlas)))
areas = sort(unique(c(atlas)))[1,]
areas = sort(unique(c(atlas)))[1:]
areas = sort(unique(c(atlas)))[1:]
area[1]
areas[1]
areas[1:]
areas[:]
areas = sort(unique(c(atlas)))[-1]
atlas/areas[1]
atlas * 4
test = atlas * 4
test = atlas/areas[1]
unique(c(atlas/areas[1]))
unique(c(atlas/areas[1])) == 1
atlas/areas[1] == 1
(atlas/areas[1] == 1)*1
slice = (atlas/areas[1] == 1)*1
unique(c(slice))
?length
areas = sort(unique(c(atlas)))[-1] ## get rid of 0
binary_atlas = c()
for (i in 1:length(areas)){
binary_atlas[i] = (atlas/areas[i] == 1)*1
}
warnings()
binary_atlas = c()
for (i in 1:length(areas)){
binary_atlas[,,,i] = (atlas/areas[i] == 1)*1
}
?array
dim(atlas)
dim(atlas),2
c(dim(atlas),2)
areas = sort(unique(c(atlas)))[-1] ## get rid of 0
num_areas = length(areas)
binary_atlas = array(dim = c(dim(atlas),num_areas))
for (i in 1:num_areas){
binary_atlas[,,,i] = (atlas/areas[i] == 1)*1
}
count(binary_atlas[,,,1] == 1 )
sum(binary_atlas[,,,1] == 1 )
binary_atlas = make_binary_atlas(atlas) ## num_areas of 3d binary masks
make_binary_atlas<-function(atlas){
areas = sort(unique(c(atlas)))[-1] ## get rid of 0
num_areas = length(areas)
binary_atlas = array(dim = c(dim(atlas),num_areas))
for (i in 1:num_areas){
binary_atlas[,,,i] = (atlas/areas[i] == 1)*1
}
return(binary_atlas)
}
binary_atlas = make_binary_atlas(atlas) ## num_areas of 3d binary masks
num_areas = dim(binary_atlas)[4]
for (i in 1:num_areas){
count_areas[i] = sum(binary_atlas[,,,i] == 1)
}
count_areas = c()
for (i in 1:num_areas){
count_areas[i] = sum(binary_atlas[,,,i] == 1)
}
sum(data[,,,1] .* binary_atlas[,,,1])
data[,,,1] .* binary_atlas[,,,1]
data[,,,1]
a = array(1:4,dim=c(2,2))
b = array(c(0,0,1,1),dim=(2,2))
b = array(c(0,0,1,1),dim=c(2,2))
a .* b
a * b
a
b
sum(a,b)
sum(a*b)
datalist = array(dim = c(num_areas,num_slices))
num_slices = dim(data)[4]
datalist = array(dim = c(num_areas,num_slices))
datalist
datalsit[1,]
datalist[1,]
combn(c(1,2,3),2)
combn([1,2,3],2)
matrix(rexp(200, rate=.1), ncol=20)
B = matrix(rexp(200, rate=.1), ncol=20)
W = matrix(1,20,20)
result = sign(B) * pmax(abs(B)-W, 0)
.softThrek <- function(x, lambda){
result = sign(x) * pmax(abs(x)-lambda, 0)
return(result)
}
.softThrek(B,W)
abs(matrix(1,20,20))
?rexp()
matrix(rexp(200), 10)
matrix(rexp(200), 10,10)
B = matrix(rexp(200),10,10)
W = matrix(1,20,20)
.softThrek(B,W)
2 / matirx(2,20,20)
2 / matrix(2,20,20)
1 / matrix(2,20,20)
combn(c(1,2,3),2)
combn(c(1,2,3),2)[2,1]
combn(c(1,2,3),2)[c(2,1),c(1,2,3)]
combn(c(1,2,3),2)[c(2,1),]
a = combn(g,2)
b = combn(g,2)[c(2,1),]
g = c(1,2,3)
a = combn(g,2)
b = combn(g,2)[c(2,1),]
a
b
abind(a,b)
cbind(a,b)
cbind(a,b)[,1]
cbind(a,b)[,1][1]
data("exampleData")
exampleData
dim(exampleData)
dim(exampleData[[1]])
dim(exampleData[[1]])[1,1]
matrix(1,20,20)[1,1]
.softThrek(B,1)
.softThrek(B,W)
?array
a = combn(g,2)
b = combn(g,2)[c(2,1),]
gV = cbind(a,b)
gV
dim(gV)[2]
gV[1,1],gV[2,1]
gV[1,1]
gV[2,1]
devtools::document()
ls
setwd
setwd("/Users/ouchouyang/Desktop/JointNets")
devtools::document()
setwd("/Users/ouchouyang/Desktop/JointNets/JointNets")
devtools::document()
library(JointNets)
data(cancer)
cancerlist = list(as.matrix(cancer[[1]][which(cancer[[2]] == "not"), ]),
as.matrix(cancer[[1]][which(cancer[[2]] == "pcr"), ]))
result = diffeek(cancerlist[[1]], cancerlist[[2]], W = , g = )
result = diffeek(cancerlist[[1]], cancerlist[[2]], W = matrix(1,26,26), g = c(1,2,3))
View(result)
result
result[["graphs"]][[1]]
plot(result)
result = diffeek(cancerlist[[1]], cancerlist[[2]], W = matrix(1,26,26), g = c(1,2,3),0.01,0.01)
plot(result)
0.05/matrix(1,20,20)
.softThrek(1,0.5)
.softThrek(1,0.8)
result = diffeek(cancerlist[[1]], cancerlist[[2]], W = matrix(1,26,26), g = c(1,2,3),0.01,1)
plot(result)
result = diffeek(cancerlist[[1]], cancerlist[[2]], W = matrix(1,26,26), g = c(1,2,3),0.1,1)
plot(result)
result = diffeek(cancerlist[[1]], cancerlist[[2]], W = matrix(1,26,26), g = c(1,2,3),0.1,10)
plot(result)
result = diffeek(cancerlist[[1]], cancerlist[[2]], W = matrix(1,26,26), g = c(1,2,3),0.1,100)
plot(result)
result = diffeek(cancerlist[[1]], cancerlist[[2]], W = matrix(1,26,26), g = c(1,2,3),0.1,50)
plot(result)
result = diffeek(cancerlist[[1]], cancerlist[[2]], W = matrix(1,26,26), g = c(1,2,3),0.1,70)
plot(result)
