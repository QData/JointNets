server <- function(input, output) {
output$plot <- renderPlot({
result = eventReactive(input$go, {
runif(eval(as.name(input$result)))
})
par(mfrow = c(1, 1))
#layout = layout_nicely(returngraph(eval(as.name(input$result))), dim = 2)
plot(x = result,
type = input$type,
index = as.integer(input$index),
subID = if (as.integer(input$subID) == -1) NULL else as.integer(input$subID)
)
})
}
app = shinyApp(ui = ui, server = server)
#' GUI version of plot
#' @export
plot_gui <- function(){
runApp(app)
}
runApp(app)
library(shiny)
ui <- fluidPage(
titlePanel("JointNet GUI"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
textInput("result","choose a graph to plot"),
actionButton("confirm", "confirm"),
selectInput("type", "choose the graph type:",
choices = c("task","share","taskspecific","neighbour")),
conditionalPanel("input.type == 'neighbour'",
selectInput("neighbouroption", "choose a neighbour option:",
choices = c("task","taskspecific"))
),
conditionalPanel("input.type == 'neighbour'",
numericInput("index", "choose node id to zoom in", 1,
1, 1000, 1)
),
conditionalPanel("input.type != 'share'",
numericInput("subID", "choose a context id", -1,
-1, 100, 1)
)
##actionButton("update", "Plot")
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output) {
output$plot <- renderPlot({
result = eventReactive(input$confirm, {
runif(eval(as.name(input$result)))
})
par(mfrow = c(1, 1))
#layout = layout_nicely(returngraph(eval(as.name(input$result))), dim = 2)
plot(x = result,
type = input$type,
index = as.integer(input$index),
subID = if (as.integer(input$subID) == -1) NULL else as.integer(input$subID)
)
})
}
app = shinyApp(ui = ui, server = server)
#' GUI version of plot
#' @export
plot_gui <- function(){
runApp(app)
}
runApp(app)
library(shiny)
ui <- fluidPage(
titlePanel("JointNet GUI"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
textInput("result","choose a graph to plot"),
actionButton("confirm", "confirm"),
selectInput("type", "choose the graph type:",
choices = c("task","share","taskspecific","neighbour")),
conditionalPanel("input.type == 'neighbour'",
selectInput("neighbouroption", "choose a neighbour option:",
choices = c("task","taskspecific"))
),
conditionalPanel("input.type == 'neighbour'",
numericInput("index", "choose node id to zoom in", 1,
1, 1000, 1)
),
conditionalPanel("input.type != 'share'",
numericInput("subID", "choose a context id", -1,
-1, 100, 1)
)
##actionButton("update", "Plot")
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output) {
result = eventReactive(input$confirm, {
runif(eval(as.name(input$result)))
})
output$plot <- renderPlot({
par(mfrow = c(1, 1))
#layout = layout_nicely(returngraph(eval(as.name(input$result))), dim = 2)
plot(x = result,
type = input$type,
index = as.integer(input$index),
subID = if (as.integer(input$subID) == -1) NULL else as.integer(input$subID)
)
})
}
app = shinyApp(ui = ui, server = server)
#' GUI version of plot
#' @export
plot_gui <- function(){
runApp(app)
}
runApp(app)
hist(50)
?runif
runif(50)
library(shiny)
ui <- fluidPage(
titlePanel("JointNet GUI"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
textInput("result","choose a graph to plot"),
actionButton("confirm", "confirm"),
selectInput("type", "choose the graph type:",
choices = c("task","share","taskspecific","neighbour")),
conditionalPanel("input.type == 'neighbour'",
selectInput("neighbouroption", "choose a neighbour option:",
choices = c("task","taskspecific"))
),
conditionalPanel("input.type == 'neighbour'",
numericInput("index", "choose node id to zoom in", 1,
1, 1000, 1)
),
conditionalPanel("input.type != 'share'",
numericInput("subID", "choose a context id", -1,
-1, 100, 1)
)
##actionButton("update", "Plot")
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output) {
result <- eventReactive(input$confirm, {
eval(as.name(input$result))
})
output$plot <- renderPlot({
par(mfrow = c(1, 1))
#layout = layout_nicely(returngraph(eval(as.name(input$result))), dim = 2)
plot(x = result(),
type = input$type,
index = as.integer(input$index),
subID = if (as.integer(input$subID) == -1) NULL else as.integer(input$subID)
)
})
}
app = shinyApp(ui = ui, server = server)
#' GUI version of plot
#' @export
plot_gui <- function(){
runApp(app)
}
runApp(app)
library(shiny)
ui <- fluidPage(
titlePanel("JointNet GUI"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
textInput("result","choose a graph to plot"),
actionButton("confirm", "confirm"),
selectInput("type", "choose the graph type:",
choices = c("task","share","taskspecific","neighbour")),
conditionalPanel("input.type == 'neighbour'",
selectInput("neighbouroption", "choose a neighbour option:",
choices = c("task","taskspecific"))
),
conditionalPanel("input.type == 'neighbour'",
numericInput("index", "choose node id to zoom in", 1,
1, 1000, 1)
),
conditionalPanel("input.type != 'share'",
numericInput("subID", "choose a context id", -1,
-1, 100, 1)
)
##actionButton("update", "Plot")
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output) {
result <- eventReactive(input$confirm, {
5
#eval(as.name(input$result))
})
output$plot <- renderPlot({
par(mfrow = c(1, 1))
plot(result())
#layout = layout_nicely(returngraph(eval(as.name(input$result))), dim = 2)
if(FALSE){
plot(x = result(),
type = input$type,
index = as.integer(input$index),
subID = if (as.integer(input$subID) == -1) NULL else as.integer(input$subID)
)
}
})
}
app = shinyApp(ui = ui, server = server)
#' GUI version of plot
#' @export
plot_gui <- function(){
runApp(app)
}
runApp(app)
library(shiny)
ui <- fluidPage(
titlePanel("JointNet GUI"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
textInput("result","choose a graph to plot"),
actionButton("confirm", "confirm"),
selectInput("type", "choose the graph type:",
choices = c("task","share","taskspecific","neighbour")),
conditionalPanel("input.type == 'neighbour'",
selectInput("neighbouroption", "choose a neighbour option:",
choices = c("task","taskspecific"))
),
conditionalPanel("input.type == 'neighbour'",
numericInput("index", "choose node id to zoom in", 1,
1, 1000, 1)
),
conditionalPanel("input.type != 'share'",
numericInput("subID", "choose a context id", -1,
-1, 100, 1)
)
##actionButton("update", "Plot")
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output) {
result <- eventReactive(input$confirm, {
eval(as.name(input$result))
})
output$plot <- renderPlot({
par(mfrow = c(1, 1))
plot(result)
#layout = layout_nicely(returngraph(eval(as.name(input$result))), dim = 2)
print(result())
if(FALSE){
plot(x = result(),
type = input$type,
index = as.integer(input$index),
subID = if (as.integer(input$subID) == -1) NULL else as.integer(input$subID)
)
}
})
}
app = shinyApp(ui = ui, server = server)
#' GUI version of plot
#' @export
plot_gui <- function(){
runApp(app)
}
runApp(app)
library(shiny)
ui <- fluidPage(
titlePanel("JointNet GUI"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
textInput("result","choose a graph to plot"),
actionButton("confirm", "confirm"),
selectInput("type", "choose the graph type:",
choices = c("task","share","taskspecific","neighbour")),
conditionalPanel("input.type == 'neighbour'",
selectInput("neighbouroption", "choose a neighbour option:",
choices = c("task","taskspecific"))
),
conditionalPanel("input.type == 'neighbour'",
numericInput("index", "choose node id to zoom in", 1,
1, 1000, 1)
),
conditionalPanel("input.type != 'share'",
numericInput("subID", "choose a context id", -1,
-1, 100, 1)
)
##actionButton("update", "Plot")
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output) {
v <- reactiveValues()
observeEvent(input$confirm, {
v = input$result
#v = eval(as.name(input$result))
})
output$plot <- renderPlot({
par(mfrow = c(1, 1))
#layout = layout_nicely(returngraph(eval(as.name(input$result))), dim = 2)
plot(x = eval(as.name(v)),
type = input$type,
index = as.integer(input$index),
subID = if (as.integer(input$subID) == -1) NULL else as.integer(input$subID)
)
})
}
app = shinyApp(ui = ui, server = server)
#' GUI version of plot
#' @export
plot_gui <- function(){
runApp(app)
}
runApp(app)
library(shiny)
ui <- fluidPage(
titlePanel("JointNet GUI"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
textInput("result","choose a graph to plot"),
actionButton("confirm", "confirm"),
selectInput("type", "choose the graph type:",
choices = c("task","share","taskspecific","neighbour")),
conditionalPanel("input.type == 'neighbour'",
selectInput("neighbouroption", "choose a neighbour option:",
choices = c("task","taskspecific"))
),
conditionalPanel("input.type == 'neighbour'",
numericInput("index", "choose node id to zoom in", 1,
1, 1000, 1)
),
conditionalPanel("input.type != 'share'",
numericInput("subID", "choose a context id", -1,
-1, 100, 1)
)
##actionButton("update", "Plot")
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output) {
v <- reactiveValues()
observeEvent(input$confirm, {
v = 5
#v = input$result
#v = eval(as.name(input$result))
})
output$plot <- renderPlot({
par(mfrow = c(1, 1))
#layout = layout_nicely(returngraph(eval(as.name(input$result))), dim = 2)
plot(v)
})
}
app = shinyApp(ui = ui, server = server)
#' GUI version of plot
#' @export
plot_gui <- function(){
runApp(app)
}
runApp(app)
warning()
warnings()
options(warn=2)
runApp(app)
options(warn=1)
runApp(app)
length(result$graphs)
library(shiny); runApp('R/plot_gui.R')
runApp('R/plot_gui.R')
devtools::document()
library(JointNets)
plot_gui
plot_gui()
demo(simule)
library(JointNets)
demo(simule)
library(JointNets)
?plot_gui
data("aal116coordinates")
View(aal116coordinates)
aal116coordinates
aal116coordinates[0]
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
devtools::document()
devtools::document()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
par(mfrow = c(1, 1))
par(ask=F)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
source("plot_gui.R")
source('C:/Users/Mike Wang/Desktop/JointNets/JointNets/R/plot_gui.R')
library(JointNets)
plot_gui()
graphics.off()
par(ask=F)
par(mfrow=c(1,1))
plot_gui()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
demo(simule)
plot_gui()
devtools::document()
library(JointNets)
plot_gui()
demo(simule)
demo(brain)
devtools::document()
?simule
devtools::document()
devtools::document()
?jeek
devtools::document()
?jeek
data("ABIDE_aal116_timeseries")
ABIDE_aal116_timeseries[[1]]
test = list(ABIDE_aal116_timeseries[[1]][-1:-2000,1:116],ABIDE_aal116_timeseries[[2]][-1:-2000,1:116])
test = list(ABIDE_aal116_timeseries[[1]][-1:-1500,1:116],ABIDE_aal116_timeseries[[2]][-1:-1500,1:116])
test = list(ABIDE_aal116_timeseries[[1]][-1:-1500,1:116],ABIDE_aal116_timeseries[[2]][-1:-1500,1:116])
test = list(ABIDE_aal116_timeseries[[1]][-1:-1500,1:116],ABIDE_aal116_timeseries[[2]][-1:-1500,1:116])
test = list(ABIDE_aal116_timeseries[[1]][-1:-3000,1:116],ABIDE_aal116_timeseries[[2]][-1:-3000,1:116])
data("exampleData500")
test = list(ABIDE_aal116_timeseries[[1]][-1:-2000,1:116],ABIDE_aal116_timeseries[[2]][-1:-2000,1:116])
ABIDE_aal116_timeseries = list(ABIDE_aal116_timeseries[[1]][-1:-2000,1:116],ABIDE_aal116_timeseries[[2]][-1:-2000,1:116])
save(ABIDE_aal116_timeseries, file = "ABIDE_aal116_timeseries.rda")
{
start_time = Sys.time()
data500 = simulation(p=500, n = c(500,500))
diffee(data500[[1]], data500[[2]], 1)
end_time = Sys.time()
print(paste(
"the time taken for DIFFEE to run with p = 500 is",
end_time - start_time,
"mins"
))
}
{
start_time = Sys.time()
data500 = simulation(p=500, n = c(500,500))
diffee(data500$simulatedsamples[[1]], data500$simulatedsamples[[2]], 1)
end_time = Sys.time()
print(paste(
"the time taken for DIFFEE to run with p = 500 is",
end_time - start_time,
"mins"
))
}
demo(brain)
plot_gui()
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout,hatitle = FALSE)
demo(brain)
?simule
devtools::document()
data("ABIDE_aal116_timeseries")
