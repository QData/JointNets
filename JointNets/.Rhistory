titlePanel("JointNet GUI"),
sidebarLayout(
# Sidebar with a slider and selection inputs
sidebarPanel(
textInput("result","choose a graph to plot"),
actionButton("confirm", "confirm"),
selectInput("type", "choose the graph type:",
choices = c("task","share","taskspecific","neighbour")),
conditionalPanel("input.type == 'neighbour'",
selectInput("neighbouroption", "choose a neighbour option:",
choices = c("task","taskspecific"))
),
conditionalPanel("input.type == 'neighbour'",
numericInput("index", "choose node id to zoom in", 1,
1, 1000, 1)
),
conditionalPanel("input.type != 'share'",
numericInput("subID", "choose a context id", -1,
-1, 100, 1)
)
##actionButton("update", "Plot")
),
mainPanel(
plotOutput("plot")
)
)
)
server <- function(input, output) {
v <- reactiveValues()
observeEvent(input$confirm, {
v = 5
#v = input$result
#v = eval(as.name(input$result))
})
output$plot <- renderPlot({
par(mfrow = c(1, 1))
#layout = layout_nicely(returngraph(eval(as.name(input$result))), dim = 2)
plot(v)
})
}
app = shinyApp(ui = ui, server = server)
#' GUI version of plot
#' @export
plot_gui <- function(){
runApp(app)
}
runApp(app)
warning()
warnings()
options(warn=2)
runApp(app)
options(warn=1)
runApp(app)
length(result$graphs)
library(shiny); runApp('R/plot_gui.R')
runApp('R/plot_gui.R')
devtools::document()
library(JointNets)
plot_gui
plot_gui()
demo(simule)
library(JointNets)
demo(simule)
library(JointNets)
?plot_gui
data("aal116coordinates")
View(aal116coordinates)
aal116coordinates
aal116coordinates[0]
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
devtools::document()
devtools::document()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
par(mfrow = c(1, 1))
par(ask=F)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
library(JointNets)
plot_gui()
source("plot_gui.R")
source('C:/Users/Mike Wang/Desktop/JointNets/JointNets/R/plot_gui.R')
library(JointNets)
plot_gui()
graphics.off()
par(ask=F)
par(mfrow=c(1,1))
plot_gui()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
demo(simule)
plot_gui()
devtools::document()
library(JointNets)
plot_gui()
demo(simule)
demo(brain)
devtools::document()
?simule
devtools::document()
devtools::document()
?jeek
devtools::document()
?jeek
data("ABIDE_aal116_timeseries")
ABIDE_aal116_timeseries[[1]]
test = list(ABIDE_aal116_timeseries[[1]][-1:-2000,1:116],ABIDE_aal116_timeseries[[2]][-1:-2000,1:116])
test = list(ABIDE_aal116_timeseries[[1]][-1:-1500,1:116],ABIDE_aal116_timeseries[[2]][-1:-1500,1:116])
test = list(ABIDE_aal116_timeseries[[1]][-1:-1500,1:116],ABIDE_aal116_timeseries[[2]][-1:-1500,1:116])
test = list(ABIDE_aal116_timeseries[[1]][-1:-1500,1:116],ABIDE_aal116_timeseries[[2]][-1:-1500,1:116])
test = list(ABIDE_aal116_timeseries[[1]][-1:-3000,1:116],ABIDE_aal116_timeseries[[2]][-1:-3000,1:116])
data("exampleData500")
test = list(ABIDE_aal116_timeseries[[1]][-1:-2000,1:116],ABIDE_aal116_timeseries[[2]][-1:-2000,1:116])
ABIDE_aal116_timeseries = list(ABIDE_aal116_timeseries[[1]][-1:-2000,1:116],ABIDE_aal116_timeseries[[2]][-1:-2000,1:116])
save(ABIDE_aal116_timeseries, file = "ABIDE_aal116_timeseries.rda")
{
start_time = Sys.time()
data500 = simulation(p=500, n = c(500,500))
diffee(data500[[1]], data500[[2]], 1)
end_time = Sys.time()
print(paste(
"the time taken for DIFFEE to run with p = 500 is",
end_time - start_time,
"mins"
))
}
{
start_time = Sys.time()
data500 = simulation(p=500, n = c(500,500))
diffee(data500$simulatedsamples[[1]], data500$simulatedsamples[[2]], 1)
end_time = Sys.time()
print(paste(
"the time taken for DIFFEE to run with p = 500 is",
end_time - start_time,
"mins"
))
}
demo(brain)
plot_gui()
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout,hatitle = FALSE)
demo(brain)
?simule
devtools::document()
data("ABIDE_aal116_timeseries")
library(JointNets)
demo(brain)
rgl.snapshot("brain.png")
devtools::document()
?JointNets
??JointNets
?package.description(JointNets)
help(JointNEts)
help(JointNets)
help(package ="JointNets")
JointNets
library(JointNets)
help(package ="JointNets")
\dontrun{
simulationresult = simulation(n=c(100,100,100))
AUC_result = AUC(simulationresult,lambdas = seq(0.1,2,0.05),epsilon = 2)
AUC_result
graphics.off()
par(ask = F)
par(mfrow = c(1, 1))
plot(AUC_result$fPM,AUC_result$tPM)
simulationresult = simulation(n=c(100,100,100))
AUC_result = AUC(simulationresult,lambdas = seq(0.1,2,0.2),epsilon = 2)
AUC_result
graphics.off()
par(ask = F)
par(mfrow = c(1, 1))
plot(AUC_result$fPM,AUC_result$tPM)
simulationresult = simulation(n=c(100,100,100))
AUC_result = AUC(simulationresult,lambdas = seq(0.1,2,0.5),epsilon = 2)
AUC_result
graphics.off()
par(ask = F)
par(mfrow = c(1, 1))
plot(AUC_result$fPM,AUC_result$tPM)
simulationresult = simulation(n=c(100,100,100))
AUC_result = AUC(simulationresult,lambdas = seq(0.1,2,0.5),epsilon = 2)
AUC_result
graphics.off()
par(ask = F)
par(mfrow = c(1, 1))
plot(AUC_result$fPM,AUC_result$tPM)
devtools::run_examples()
simulateresult = simulation(p = 20,  n = c(100,100))
result = simule(simulateresult$simulatedsamples, 0.2, 0.5, covType = "cov", TRUE)
BIC(simulateresult$simulatedsamples,result)
library(JointNets)
data(exampleData)
result = diffee(exampleData[[1]], exampleData[[2]], 0.45)
plot(result)
library(JointNets)
data(exampleData)
result = diffeek(exampleData[[1]], exampleData[[2]],
W = matrix(1,20,20), g = rep(0,20),epsilon = 0.2,
lambda = 0.4,covType = "cov")
plot(result)
simulationresult = simulation(p = 20,  n = c(100,100))
truth = simulationresult$simulatedgraphs
result = simule(simulationresult$simulatedsamples, 0.2, 0.5, covType = "cov", TRUE)
F1(result,truth)
simulationresult = simulation(p = 20,  n = c(100,100))
truth = simulationresult$simulatedgraphs
result = simule(simulationresult$simulatedsamples, 0.2, 0.5, covType = "cov", TRUE)
F1(result,truth)
simulationresult = simulation(p = 20,  n = c(100,100))
truth = simulationresult$simulatedgraphs
result = wsimule(simulationresult$simulatedsamples,
0.2, 1, W = matrix(1,20,20), covType = "cov", TRUE)
F1(result,truth)
simulationresult = simulation(p = 20,  n = c(100,100))
truth = simulationresult$simulatedgraphs
result = jeek(simulationresult$simulatedsamples,0.25,covType = "kendall",parallel = TRUE)
F1(result,truth)
simulationresult = simulation(p = 20,  n = c(100,100))
truth = simulationresult$simulatedgraphs
result = fasjem(simulationresult$simulatedsamples, method = "fasjem-g", 2, 0.1, 0.1, 0.05, 20)
F1(result,truth)
simulationresult = simulation(p = 20,  n = c(100,100))
truth = simulationresult$simulatedgraphs
result = diffee(simulationresult$simulatedsamples[[1]],
simulationresult$simulatedsamples[[2]], 0.01)
F1(result,truth)
library(JointNets)
simulationresult = simulation(p = 20,  n = c(100,100))
truth = simulationresult$simulatedgraphs
result = diffeek(simulationresult$simulatedsamples[[1]],
simulationresult$simulatedsamples[[2]],
W = matrix(1,20,20), g = rep(0,20),epsilon = 0.2,
lambda = 0.4,covType = "cov")
F1(result,truth)
library(JointNets)
data(exampleData)
result = fasjem(X = exampleData, method = "fasjem-g", 0.5, 0.1, 0.1, 0.05, 10)
plot(result)
library(JointNets)
data(exampleData)
result = jeek(X = exampleData, 0.3, covType = "cov", parallel = TRUE)
plot(result)
library(JointNets)
data(exampleData)
result = jeek(X = exampleData, 0.3, covType = "cov", parallel = TRUE)
plot.jeek(result)
library(JointNets)
data(exampleData)
result = simule(X = exampleData , lambda = 0.1, epsilon = 0.45, covType = "cov", FALSE)
plot(result)
library(JointNets)
data(exampleData)
result = simulation(n = c(100,100,100))$simulatedgraphs
plot(result)
library(JointNets)
data(exampleData)
result = wsimule(X = exampleData , lambda = 0.1, epsilon = 0.45,
W = matrix(1,20,20), covType = "cov", FALSE)
plot(result)
library(JointNets)
data(exampleData)
result = fasjem(X = exampleData, method = "fasjem-g", 0.5, 0.1, 0.1, 0.05, 10)
plot(result)
library(JointNets)
data(exampleData)
result = diffee(exampleData[[1]], exampleData[[2]], 0.45)
plot.diffee(result)
library(JointNets)
data(exampleData)
result = diffeek(exampleData[[1]], exampleData[[2]],
W = matrix(1,20,20), g = rep(0,20),epsilon = 0.2,
lambda = 0.4,covType = "cov")
plot(result)
library(JointNets)
plot_gui()
library(JointNets)
graphics.off()
par(ask=F)
par(mfrow=c(1,1))
data(ABIDE_aal116_timeseries)
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,
aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
graphics.off()
par(ask=F)
par(mfrow=c(1,1))
data(ABIDE_aal116_timeseries)
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,
aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
result = simule(ABIDE_aal116_timeseries, 1, 1, covType = "cov", TRUE)
result = simule(ABIDE_aal116_timeseries, 1, 10, covType = "cov", TRUE)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
data(exampleData)
result = jeek(X = exampleData, 0.3, covType = "cov", parallel = TRUE)
graph = returngraph(result)
library(JointNets)
simulateresult = simulation(p = 20,  n = c(100,100))
plot(simulateresult$simulatedgraphs)
library(JointNets)
data(exampleData)
result = wsimule(X = exampleData , lambda = 0.1, epsilon = 0.45,
W = matrix(1,20,20), covType = "cov", FALSE)
plot(result)
devtools::run_examples()
data(exampleData)
result = diffee(exampleData[[1]], exampleData[[2]], 0.45)
graph = returngraph.diffee(result)
library(JointNets)
data(exampleData)
result = diffee(exampleData[[1]], exampleData[[2]], 0.45)
graph = returngraph.diffee(result)
library(JointNets)
data(exampleData)
result = simulation(n=c(100,100,100))$simulatedgraphs
graph = returngraph.fasjem(result)
graphics.off()
par(ask=F)
par(mfrow=c(1,1))
library(JointNets)
data(exampleData)
result = simulation(n=c(100,100,100))$simulatedgraphs
graph = returngraph.fasjem(result)
devtools::document()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
?shiny::stopApp
devtools::run_examples()
library(JointNets)
plot_gui()
library(JointNets)
library(JointNets)
plot_gui()
interactive
interactive()
library(JointNets)
if(interactive()){
plot_gui()
shiny::stopApp()
}
devtools::run_examples()
par(ask = F)
par(ask = True)
par(ask = False)
par(ask = F)
par(ask = FALSE)
devtools::run_examples()
devtools::document()
?fasjem
library(JointNets)
?fasjem
?diffee
devtools::document()
devtools::document()
?interactive()
simulation(p=116, n = c(1,1))
result = simulation(p=116, n = c(1,1))$simulatedgraphs
class(result) = "simule"
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
graphics.off()
par(ask=F)
par(mfrow=c(1,1))
data(ABIDE_aal116_timeseries)
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,
aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
#result = diffeek(ABIDE_aal116_timeseries[[1]], ABIDE_aal116_timeseries[[2]],
# W = matrix(1,116,116), g = 0,epsilon = 0.1, lambda = 0.001)
## for demonstration purpose
result = simulation(p=116, n = c(1,1))$simulatedgraphs
class(result) = "simule"
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
graphics.off()
par(ask=F)
par(mfrow=c(1,1))
data(ABIDE_aal116_timeseries)
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,
aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
#result = diffeek(ABIDE_aal116_timeseries[[1]], ABIDE_aal116_timeseries[[2]],
# W = matrix(1,116,116), g = 0,epsilon = 0.1, lambda = 0.001)
## for demonstration purpose
result = simulation(p=116, s = 10, ss = 10, n = c(1,1))$simulatedgraphs
class(result) = "simule"
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
graphics.off()
par(ask=F)
par(mfrow=c(1,1))
data(ABIDE_aal116_timeseries)
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,
aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
#result = diffeek(ABIDE_aal116_timeseries[[1]], ABIDE_aal116_timeseries[[2]],
# W = matrix(1,116,116), g = 0,epsilon = 0.1, lambda = 0.001)
## for demonstration purpose only, for estimation from ABIDE data
please run the above commented code for result
result = simulation(p=116, n = c(1,1))$simulatedgraphs
class(result) = "simule"
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
graphics.off()
par(ask=F)
par(mfrow=c(1,1))
data(ABIDE_aal116_timeseries)
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,
aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
# result = diffeek(ABIDE_aal116_timeseries[[1]], ABIDE_aal116_timeseries[[2]],
# W = matrix(1,116,116), g = 0,epsilon = 0.1, lambda = 0.001)
# for demonstration purpose only, for estimation from ABIDE dataset
# please run the above commented code or run demo(brain)
result = simulation(p=116, n = c(1,1))$simulatedgraphs
class(result) = "simule"
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
devtools::document()
devtools::document()
?rbino
?rbinom
rbinom(1, 1, 0.1)
rbinom(1, 1, 0.1)
rbinom(1, 1, 0.1)
rbinom(1, 1, 0.1)
rbinom(1, 1, 0.1)
library(JointNets)
graphics.off()
par(ask=FALSE)
par(mfrow=c(1,1))
data(ABIDE_aal116_timeseries)
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,
aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
# result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", FALSE)
# for demonstration purpose only, for estimation from ABIDE dataset
# please run the above commented code or run demo(brain)
result = simulation(p=116, s = 0.01, ss = 0.01, n = c(1,1))$simulatedgraphs
class(result) = "simule"
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
graphics.off()
par(ask=FALSE)
par(mfrow=c(1,1))
data(ABIDE_aal116_timeseries)
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,
aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
# result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", FALSE)
# for demonstration purpose only, for estimation from ABIDE dataset
# please run the above commented code or run demo(brain)
result = simulation(p=116, s = 0.001, ss = 0.001, n = c(1,1))$simulatedgraphs
class(result) = "simule"
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
devtools::document()
library(JointNets)
help(package = "JointNets")
help(package == "JointNets")
help(package = "JointNets")
?JointNets
packageDescription("JointNets")
