number = as.numeric(number)
datalist = convert_nii_to_datalist(niidata,mask,number)
demo(evaluation)
setwd("E:/Github/JointNets/JointNets")
document()
n = c(1,2,3)
dim(n)
lenght(n)
length(n)
a = list(graphs = 1,share = NULL)
rownames(a$share) <- "1"
View(simulate)
list(matrix(0,10,10))
a = list(matrix(0,10,10))
a[[1]]
colnames(a[[1]])
result
result$graphs[[1]]
make_adj_matrix(result)
test = abs(result) > 0
test = abs(result$graphs) > 0
test = abs(result$graphs[[1]]) > 0
View(test)
test = make_adj_matrix(result,TRUE)
library(JointNets)
F1(simulate,result)
length(exampleData[[1]])
dim(exampleData[[1]])
dim(exampleData[[1]])[1]
comparisonplot(simulate,result)
library(JointNets)
cat(paste("BIC score is",BIC(simulationsamples,result)))
library(JointNets)
demo(diffee
)
make_adj_matrix(result)
document()
library(JointNets)
demo(diffee)
make_adj_matrix(result)
test = result$graphs
length(test)
test = list(test)
document()
library(JointNets)
demo(diffee)
demo(simule)
demo(jeek)
lenght(c(1,2,3))
length(c(1,2,3))
print(a)
print(b)
print("hellp")
print(list("a","b"))
document()
document()
document()
demo(evaluation)
document()
library(JointNets)
demo(evaluation)
document()
library(JointNets)
document()
library(JointNets)
demo(evaluation)
library(JointNets)
demo(simulation)
demo(evaluation)
simulate$graphs
test = simulate$graphs
library(JointNets)
demo(evaluation)
library(JointNets)
demo(evaluation)
test = c()
test[1]= 2
test[2]= 3
library(JointNets)
demo(evaluation)
c(1:3)
print(c(1:3))
library(JointNets)
demo(evaluation)
library(JointNets)
demo(evaluation)
library(JointNets)
demo(evaluation)
library(JointNets)
demo(evaluation)
!is.null(result$share)
library(JointNets)
library(JointNets)
demo(evaluation)
result = jeek(X = samples,
0.3,
covType = "cov",
parallel = TRUE)
evaluation(result,simulate)
result = diffee(samples[[1]], samples[[2]], 0.45)
evaluation(result,simulate)
demo(brain)
library(JointNets)
demo(brain)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
par3d(ask=F)
par3d()
par3d()
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
plot.new()
par(ask=F)
plot.new()
legend("a")
legend(legend = "a")
legend("topright",legend = "a" )
legend3d("topright",legend = "a" )
library(JointNets)
legend3d("topright",legend = "a" )
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
open3d()
open3d()
open3d()
open3d()
library(brainKCCA)
result<-permkCCA_multipleRegion(imageDat = "preproc_con21_rest_MNI_2mm",
region = c(1,5,10), col="green")
multipleRegion_plot(result, view="axial")
simulate$graphs$graphs
simulate$graphs$share
library(JointNets)
demo(brain)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
bgplot3d({
plot.new()
title(main = 'This is the main title', line = 3)
mtext(side = 1, 'This is a subtitle', line = 4)
# use here any other way you fancy to write your title
})
plot.new()
?plot.new()
bgplot3d({
plot.new()
})
bgplot3d({
})
bgplot3d({
})
text3d(20, adj = c(0.5, 0.5), y = NULL, z = NULL, texts = title)
text3d(20, adj = c(0.5, 0.5), y = NULL, z = NULL, texts = "heelo")
text3d( adj = c(0.5, 0.5), y = NULL, z = NULL, texts = "heelo")
text3d(20, adj = c(0.5, 1), y = NULL, z = NULL, texts = "heelo")
text3d(20, adj = c(0.5, 20), y = NULL, z = NULL, texts = "heelo")
text3d(20, adj = c(0.5, 20), y = NULL, z = NULL, texts = "heelo", add = FALSE)
?title3d()
rgl.cur()
rgl::open3d()
rgl.cur()
rgl.quit()
rgl.cur
rgl.cur()
rgl::rgl.cur()
rgl::rgl.close()
rgl::open3d()
rgl::title3d(main="heelo")
library(rgl)
rgl.dev.list()
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
open3d()
cols <- rainbow(7)
layout3d(matrix(1:16, 4,4), heights=c(1,3,1,3))
text3d(0,0,0,"tetrahedron3d"); next3d()
shade3d(tetrahedron3d(col=cols[1])); next3d()
library(JointNets)
library(JointNets)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
### print to rstudio viewer panel
options(rgl.printRglwidget = FALSE)
{
open3d()
cols <- rainbow(7)
layout3d(matrix(1:16, 4,4), heights=c(1,3,1,3))
text3d(0,0,0,"tetrahedron3d"); next3d()
shade3d(tetrahedron3d(col=cols[1])); next3d()
legend3d(
"topright" ,
legend = "heelo"
); next3d()
}
{
with(iris, plot3d(Sepal.Length, Sepal.Width, Petal.Length,
type="s", col=as.numeric(Species)))
legend3d(
"topright" ,
legend = "hello"
)
}
?par()
{
par(ask=FALSE)
with(iris, plot3d(Sepal.Length, Sepal.Width, Petal.Length,
type="s", col=as.numeric(Species)))
legend3d(
"topright" ,
legend = "hello"
)
}
?legend3d()
legend("topright", legend = "hello")
legend3d("topright", legend = "hello")
library('devtools')
install.packages('devtools')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(JointNets)
library(JointNets)
simulate = simulation(n = c(100,100))
AUC(simulate,"simule",seq(0,0.3, by=0.01),parallel = TRUE)
library(JointNets)
AUC(simulate,"simule",seq(0,0.3, by=0.01),parallel = TRUE)
library(JointNets)
AUC(simulate,"simule",seq(0,0.3, by=0.01),parallel = TRUE)
AUC(simulate,"simule",seq(0,1, by=0.5),parallel = TRUE)
library(JointNets)
AUC(simulate,"simule",seq(0,1, by=0.05),parallel = TRUE)
library(JointNets)
library(JointNets)
graphics.off()
par(ask = F)
par(mfrow = c(1, 1))
simulateresult = simulateGraph()
simulateresult = simulation( n = c(100,100,100))
simulation$graphs
simulateresultx$graphs
simulateresult$graphs
graphs = simulateresult$graphs
graphs$share
library(JointNets)
simulateresult = simulation( n = c(100,100,100))
graphs = simulateresult$graphs
graphs = simulateresult$simulatedgraphs
simulateresult = simulation(p =5,  n = c(100,100,100))
graphs = simulateresult$simulatedgraphs
graphs$graphs[[1]]
graphs$graphs[[2]]
graphs$share
graphs$graphs[[3]]
plot(graphs)
library(JointNets)
graphics.off()
par(ask = F)
par(mfrow = c(1, 1))
plot(graphs)
plot.simulation(graphs)
devtools::document()
devtools::document()
library(JointNets)
simulateresult = simulation(p =5,  n = c(100,100,100))
graphs = simulateresult$simulatedgraphs
plot(graphs)
simulateresult = simulation(p =20,  n = c(100,100,100))
graphs = simulateresult$simulatedgraphs
plot(graphs)
plot(graphs, subid = 1)
plot(graphs, type = "task", subid = 1)
plot(graphs, type = "individual", subid = 1)
plot(graphs, type = "individual", subid = 2)
plot(graphs, type = "task", subID = 2)
plot(graphs, type = "task", subID = 1)
plot(graphs, type = "taskspecific", subID = 1)
simulateresult$simulatedsamples
samples = simulateresult$simulatedsamples
library(JointNets)
graphics.off()
par(ask = F)
par(mfrow = c(1, 1))
simulateresult = simulation(p =20,  n = c(100,100,100))
graphs = simulateresult$simulatedgraphs
layout = layout_nicely(graphs$graphs[[1]], dim = 2)
plot(graphs, type = "task", subID = 1, layout = layout)
simulateresult = simulation(p =20,  n = c(100,100,100))
graphs = simulateresult$simulatedgraphs
layout = layout_nicely(returngraph(graphs), dim = 2)
devtools::document()
simulateresult = simulation(p =20,  n = c(100,100,100))
graphs = simulateresult$simulatedgraphs
layout = layout_nicely(returngraph(graphs), dim = 2)
plot(graphs, type = "task", subID = 1, layout = layout)
plot(graphs, type = "task", subID = 2, layout = layout)
par(mfrow = c(2, 2))
plot(graphs, type = "task", subID = 1, layout = layout)
plot(graphs, type = "task", subID = 2, layout = layout)
plot(graphs, type = "taskspecific", subID = 1, layout = layout)
plot(graphs, type = "taskspecific", subID = 2, layout = layout)
graphs$graphs[[1]] = 1
graphs$graphs[[2]] == 1
simulateresult = simulation(p =20,  n = c(100,100,100))
graphs = simulateresult$simulatedgraphs
make_adj_matrix(graphs)
adj = make_adj_matrix(graphs)
View(adj)
adj = make_adj_matrix(graphs,TRUE)
library(JointNets)
simulateresult = simulation(p =20,  n = c(100,100,100))
graphs = simulateresult$simulatedgraphs
layout = layout_nicely(returngraph(graphs), dim = 2)
par(mfrow = c(2, 2))
plot(graphs, type = "task", subID = 1, layout = layout)
plot(graphs, type = "task", subID = 2, layout = layout)
plot(graphs, type = "taskspecific", subID = 1, layout = layout)
plot(graphs, type = "taskspecific", subID = 2, layout = layout)
adj = make_adj_matrix(graphs,TRUE)
adj = make_adj_matrix(graphs,FALSE)
View(adj)
simulateresult = simulation(p =20,  n = c(100,100))
graphs = simulateresult$simulatedgraphs
layout = layout_nicely(returngraph(graphs), dim = 2)
adj = make_adj_matrix(graphs,TRUE)
diff = abs(adj[[1]]-adj[[2]])
View(diff)
data(cancer)
cancerlist = list(as.matrix(cancer[[1]][which(cancer[[2]] == "not"), ]),
as.matrix(cancer[[1]][which(cancer[[2]] == "pcr"), ]))
result = diffee(cancerlist[[1]], cancerlist[[2]], 40)
result$graphs
result$graphs[[1]]
test = result$graphs[[1]]
devtools::document()
library(JointNets)
simulateresult = simulation(p = 20,  n = c(100,100))
truth = simulateresult$simulatedgraphs
result = simule(simulateresult$simulatedsamples, 0.2, 1, covType = "cov", TRUE)
F1(result,truth)
devtools::document()
library(JointNets)
F1score = F1(result,truth)
devtools::document()
library(JointNets)
F1score = F1(result,truth)
simulateresult = simulation(p = 20,  n = c(100,100))
truth = simulateresult$simulatedgraphs
layout = layout_nicely(returngraph(truth), dim = 2)
result = simule(simulateresult$simulatedsamples, 0.2, 1, covType = "cov", TRUE)
par(mfrow = c(1, 2))
plot(truth, type = "task", layout = layout)
plot(result, type = "task", layout = layout)
?matrix
matrix(1,20,20)
m1 <- round(matrix(runif(10*10), 10, 10))
View(m1)
m2 <- round(matrix(runif(10*10), 10, 10))
testtruth = list(graphs = list(m1,m2),share = m3)
m3 <- round(matrix(runif(10*10), 10, 10))
testtruth = list(graphs = list(m1,m2),share = m3)
F1_single(m1,m1)
F1_single(m1,m2)
F1_single(m3,m2)
F1_single(m2,m2)
K = length(truth$graphs)
simulateresult = simulation(p = 20,  n = c(100,100))
truth = simulateresult$simulatedgraphs
layout = layout_nicely(returngraph(truth), dim = 2)
result = simule(simulateresult$simulatedsamples, 0.2, 1, covType = "cov", TRUE)
K = length(truth$graphs)
truth = make_adj_matrix(truth,TRUE)
result = make_adj_matrix(result,TRUE)
result[[1]]
truth
library(JointNets)
simulateresult = simulation(p = 20,  n = c(100,100))
truth = simulateresult$simulatedgraphs
layout = layout_nicely(returngraph(truth), dim = 2)
result = simule(simulateresult$simulatedsamples, 0.2, 1, covType = "cov", TRUE)
F1score = F1(result,truth)
library(JointNets)
simulateresult = simulation(p = 20,  n = c(100,100))
truth = simulateresult$simulatedgraphs
layout = layout_nicely(returngraph(truth), dim = 2)
result = simule(simulateresult$simulatedsamples, 0.2, 1, covType = "cov", TRUE)
F1score = F1(result,truth)
(abs(truth$share)>1e-5)*1
(abs(result$share)>1e-5)*1
F1_single((abs(truth$share)>1e-5)*1,
(abs(result$share)>1e-5)*1)
(abs(truth$share)>1e-5)*1 == (abs(result$share)>1e-5)*1
result = simule(simulateresult$simulatedsamples, 0.2, 0.5, covType = "cov", TRUE)
(abs(truth$share)>1e-5)*1 == (abs(result$share)>1e-5)*1
F1_single(  (abs(truth$share)>1e-5)*1  ,  (abs(result$share)>1e-5)*1  )
F1score = F1(result,truth)
# jeek (no share)
result = jeek(simulateresult$simulatedsamples,
0.25,
covType = "kendall",
parallel = TRUE)
F1score = F1(result,truth)
devtools::document()
library(JointNets)
F1score = F1(result,truth)
library(JointNets)
# diffee (difference)
result = diffee(simulateresult$simulatedsamples[[1]], simulateresult$simulatedsamples[[2]], 40)
F1score = F1(result,truth)
K = length(simulatedgraphs$graphs)
K = length(truth$graphs)
truth = make_adj_matrix(truth,TRUE)
difference = abs(truth[[1]] - truth[[2]])
View(difference)
result$graphs
# diffee (difference)
result = diffee(simulateresult$simulatedsamples[[1]], simulateresult$simulatedsamples[[2]], 1)
result$graphs
# diffee (difference)
result = diffee(simulateresult$simulatedsamples[[1]], simulateresult$simulatedsamples[[2]], 0.1)
result$graphs
F1score = F1(result,truth)
simulateresult = simulation(p = 20,  n = c(100,100))
truth = simulateresult$simulatedgraphs
layout = layout_nicely(returngraph(truth), dim = 2)
result = simule(simulateresult$simulatedsamples, 0.2, 0.5, covType = "cov", TRUE) # simule
# diffee (difference)
result = diffee(simulateresult$simulatedsamples[[1]], simulateresult$simulatedsamples[[2]], 0.1)
F1score = F1(result,truth)
### BIC score
result1 = simule(simulateresult$simulatedsamples, 0.2, 0.5, covType = "cov", TRUE) # simule
result2 = jeek(simulateresult$simulatedsamples,
0.25,
covType = "kendall",
parallel = TRUE)
result3 = diffee(simulateresult$simulatedsamples[[1]], simulateresult$simulatedsamples[[2]], 0.1)
library(JointNets)
BIC(simulateresult$simulatedsamples,result1)
BIC(simulateresult$simulatedsamples,result2)
BIC(simulateresult$simulatedsamples,result3)
devtools::document()
library(JointNets)
BIC(simulateresult$simulatedsamples,result1)
BIC(simulateresult$simulatedsamples,result2)
BIC(simulateresult$simulatedsamples,result3)
?stats::BIC
library(JointNets)
graphics.off()
par(ask=F)
par(mfrow=c(1,1))
data(ABIDE_aal116_timeseries)
label = colnames(ABIDE_aal116_timeseries[[1]])
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
