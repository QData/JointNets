type = "neighbour",
subID = 0,
index = nodeid,
layout = layout
)
plot(
result,
type = "neighbour",
neighbouroption = "taskspecific",
subID = 1,
index = nodeid,
layout = layout
)
plot(
result,
type = "neighbour",
neighbouroption = "taskspecific",
subID = 2,
index = nodeid,
layout = layout
)
}
{
data(exampleData)
result = fasjem(X = exampleData, method = "fasjem-g", 0.5, 0.1, 0.1, 0.05, 10)
graph = returngraph(result)
layout = layout_nicely(graph, dim = 2)
par(mfrow = c(3, 3))
data(exampleDataGraph)
plot(result,  type = "share", layout = layout)
plot(result,
type = "taskspecific",
subID = 1,
layout = layout)
plot(result,
type = "taskspecific",
subID = 2,
layout = layout)
plot(
exampleDataGraph[[1]],
layout = layout,
vertex.label.font = 2,
vertex.shape = "none",
vertex.label.color = "gray40",
vertex.label.cex = .7,
vertex.frame.color = "white",
edge.color = rainbow(3)[3],
vertex.size = 10 ,
main = "shared groundtruth"
)
plot(
exampleDataGraph[[2]],
layout = layout,
vertex.label.font = 2,
vertex.shape = "none",
vertex.label.color = "gray40",
vertex.label.cex = .7,
vertex.frame.color = "white",
edge.color = rainbow(3)[1],
vertex.size = 10 ,
main = "task 1 specific groundtruth"
)
plot(
exampleDataGraph[[3]],
layout = layout,
vertex.label.font = 2,
vertex.shape = "none",
vertex.label.color = "gray40",
vertex.label.cex = .7,
vertex.frame.color = "white",
edge.color = rainbow(3)[2],
vertex.size = 10 ,
main = "task 2 specific groundtruth"
)
nodeid = c(3, 8) ### node id
plot(
result,
type = "neighbour",
neighbouroption = "taskspecific",
subID = 1,
index = nodeid,
layout = layout
)
plot(
result,
type = "neighbour",
neighbouroption = "taskspecific",
subID = 2,
index = nodeid,
layout = layout
)
}
data(cancer)
cancerlist = list(as.matrix(cancer[[1]][which(cancer[[2]] == "not"),]),
as.matrix(cancer[[1]][which(cancer[[2]] == "pcr"),]))
result = diffee(cancerlist[[1]], cancerlist[[2]], 40)
label = colnames(cancer[[1]])
graph = returngraph(result)
layout = layout_nicely(graph,dim=2)
{
par(mfrow=c(1,2))
plot(result, layout = layout)
nodeid = which(label %in% c("BECNI","FLJI2650"))
plot.diffee(result, type = "neighbour",index = nodeid, layout = layout)
}
source('E:/Github/JointNets/JointNets/demo/diffee.R')
label = colnames(nip_37_data[[1]])
result = diffee(nip_37_data[[1]], nip_37_data[[2]] , 0.0035)
graph = returngraph(result)
layout = layout_nicely(graph,dim=2)
data(nip_37_data)
label = colnames(nip_37_data[[1]])
result = diffee(nip_37_data[[1]], nip_37_data[[2]] , 0.0035)
graph = returngraph(result)
layout = layout_nicely(graph,dim=2)
{
par(mfrow=c(1,2))
plot.diffee(result, layout = layout)
nodeid = which(label %in% c("results","section")) ### look for id
plot.diffee(result, type = "neighbour",index = nodeid, layout = layout)
}
data(exampleData)
result = diffee(exampleData[[1]], exampleData[[2]], 0.45)
data(exampleDataGraph)
layout = layout_nicely(exampleDataGraph[[1]], dim = 2)
{
par(mfrow=c(2,2))
plot.diffee(result,graphlayout = layout)
plot.igraph(union(exampleDataGraph[[2]], exampleDataGraph[[3]]),layout = layout,vertex.label.font=2,
vertex.shape="none",
vertex.label.color="gray40",
vertex.label.cex=.7, vertex.frame.color="white", vertex.size = 10 ,
edge.color = rainbow(1)[1],
main = "difference graph ground truth")
nodeid = c(3,8)
plot.diffee(result,type = "neighbour", index = nodeid, graphlayout = layout)
}
{
par(mfrow=c(2,2))
plot.diffee(result,layout = layout)
plot.igraph(union(exampleDataGraph[[2]], exampleDataGraph[[3]]),layout = layout,vertex.label.font=2,
vertex.shape="none",
vertex.label.color="gray40",
vertex.label.cex=.7, vertex.frame.color="white", vertex.size = 10 ,
edge.color = rainbow(1)[1],
main = "difference graph ground truth")
nodeid = c(3,8)
plot.diffee(result,type = "neighbour", index = nodeid, layout = layout)
}
library(JointNets)
demo(diffee)
library(JointNets)
demo(jeek)
data(nip_37_data)
label = colnames(nip_37_data[[1]])
result = jeek(X = nip_37_data,
0.12,
covType = "kendall",
parallel = TRUE)
graph = returngraph(result)
layout = layout_nicely(graph, dim = 2)
{
par(mfrow = c(2, 2))
plot(result, type = "task", layout = layout)
plot(result, type = "share", layout = layout)
plot(result,
type = "taskspecific",
subID = 1,
layout = layout)
plot(result,
type = "taskspecific",
subID = 2,
layout = layout)
}
{
nodeid = which(label %in% c("data", "probability")) ### look for id
plot.jeek(result,
type = "neighbour",
index = nodeid,
layout = layout)
plot.jeek(
result,
type = "neighbour",
subID = 0,
index = nodeid,
layout = layout
)
plot.jeek(
result,
type = "neighbour",
neighbouroption = "taskspecific",
subID = 1,
index = nodeid,
layout = layout
)
plot.jeek(
result,
type = "neighbour",
neighbouroption = "taskspecific",
subID = 2,
index = nodeid,
layout = layout
)
}
data(exampleData)
result = jeek(X = exampleData,
0.3,
covType = "cov",
parallel = TRUE)
graph = returngraph(result)
layout = layout_nicely(graph, dim = 2)
label = NULL
{
par(mfrow = c(2, 2))
plot(result, type = "task", layout = layout)
plot(result, type = "share", layout = layout)
plot(result,
type = "taskspecific",
subID = 1,
layout = layout)
plot(result,
type = "taskspecific",
subID = 2,
layout = layout)
}
{
par(mfrow = c(2, 3))
plot(result,
graphlabel = label,
type = "share",
layout = layout)
plot(
result,
graphlabel = label,
type = "taskspecific",
subID = 1,
layout = layout
)
plot(
result,
graphlabel = label,
type = "taskspecific",
subID = 2,
layout = layout
)
plot(
exampleDataGraph[[1]],
layout = layout,
vertex.label.font = 2,
vertex.shape = "none",
vertex.label.color = "gray40",
vertex.label.cex = .7,
vertex.frame.color = "white",
edge.color = rainbow(3)[3],
vertex.size = 10 ,
main = "shared groundtruth"
)
plot(
exampleDataGraph[[2]],
layout = layout,
vertex.label.font = 2,
vertex.shape = "none",
vertex.label.color = "gray40",
vertex.label.cex = .7,
vertex.frame.color = "white",
edge.color = rainbow(3)[1],
vertex.size = 10 ,
main = "task 1 specific groundtruth"
)
plot(
exampleDataGraph[[3]],
layout = layout,
vertex.label.font = 2,
vertex.shape = "none",
vertex.label.color = "gray40",
vertex.label.cex = .7,
vertex.frame.color = "white",
edge.color = rainbow(3)[2],
vertex.size = 10 ,
main = "task 2 specific groundtruth"
)
}
{
par(mfrow = c(2, 2))
plot(result,
type = "neighbour",
index = nodeid,
layout = layout)
plot(
result,
type = "neighbour",
subID = 0,
index = nodeid,
layout = layout
)
plot(
result,
type = "neighbour",
neighbouroption = "taskspecific",
subID = 1,
index = nodeid,
layout = layout
)
plot(
result,
type = "neighbour",
neighbouroption = "taskspecific",
subID = 2,
index = nodeid,
layout = layout
)
}
nodeid = c(3, 8) ### node id
{
par(mfrow = c(2, 2))
plot(result,
type = "neighbour",
index = nodeid,
layout = layout)
plot(
result,
type = "neighbour",
subID = 0,
index = nodeid,
layout = layout
)
plot(
result,
type = "neighbour",
neighbouroption = "taskspecific",
subID = 1,
index = nodeid,
layout = layout
)
plot(
result,
type = "neighbour",
neighbouroption = "taskspecific",
subID = 2,
index = nodeid,
layout = layout
)
}
library(JointNets)
demo(jeek)
library(JointNets)
demo(simule)
library(JointNets)
demo(fasjem)
data(exampleData)
result = fasjem(X = exampleData, method = "fasjem-g", 0.5, 0.1, 0.1, 0.05, 10)
graph = returngraph(result)
layout = layout_nicely(graph, dim = 2)
label = NULL
{
par(mfrow = c(2, 2))
plot(result, type = "task", layout = layout)
plot(result, type = "share", layout = layout)
plot(result,
type = "taskspecific",
subID = 1,
layout = layout)
plot(result,
type = "taskspecific",
subID = 2,
layout = layout)
}
plot(result, type = "task", layout = layout)
plot(result, type = "share", layout = layout)
plot(result,
type = "taskspecific",
subID = 1,
layout = layout)
plot(result,
type = "taskspecific",
subID = 2,
layout = layout)
data(cancer)
cancerlist = list(as.matrix(cancer[[1]][which(cancer[[2]] == "not"), ]),
as.matrix(cancer[[1]][which(cancer[[2]] == "pcr"), ]))
result = fasjem(X = cancerlist, method = "fasjem-g", 2, 0.1, 0.1, 0.05, 20)
label = colnames(cancer[[1]])
graph = returngraph(result)
layout = layout_nicely(graph, dim = 2)
{
par(mfrow = c(2, 2))
plot(result,  type = "task", layout = layout)
plot(result,  type = "share", layout = layout)
plot(result,
type = "taskspecific",
subID = 1,
layout = layout)
plot(result,
type = "taskspecific",
subID = 2,
layout = layout)
}
plot(result,
type = "neighbour",
index = nodeid,
layout = layout)
plot(result,
type = "neighbour",
index = nodeid,
layout = layout)
plot.fasjem(result,
type = "neighbour",
index = nodeid,
layout = layout)
plot.fasjem(result,
type = "neighbour",
index = nodeid,
layout = layout)
detach("package:fasjem", unload=TRUE)
data(cancer)
cancerlist = list(as.matrix(cancer[[1]][which(cancer[[2]] == "not"), ]),
as.matrix(cancer[[1]][which(cancer[[2]] == "pcr"), ]))
result = fasjem(X = cancerlist, method = "fasjem-g", 2, 0.1, 0.1, 0.05, 20)
graph = returngraph(result)
layout = layout_nicely(graph, dim = 2)
label = colnames(cancer[[1]])
{
par(mfrow = c(2, 2))
JointNets::plot(result,  type = "task", layout = layout)
JointNets::plot(result,  type = "share", layout = layout)
JointNets::plot(result,
type = "taskspecific",
subID = 1,
layout = layout)
JointNets::plot(result,
type = "taskspecific",
subID = 2,
layout = layout)
}
JointNets::plot.fasjem(result,  type = "task", layout = layout)
JointNets::plot.fasjem(result,  type = "task", layout = layout)
JointNets::plot.fasjem(result,  type = "share", layout = layout)
JointNets::plot.fasjem(result,
type = "taskspecific",
subID = 1,
layout = layout)
JointNets::plot.fasjem(result,
type = "taskspecific",
subID = 2,
layout = layout)
{
par(mfrow = c(2, 2))
JointNets::plot.fasjem(result,  type = "task", layout = layout)
JointNets::plot.fasjem(result,  type = "share", layout = layout)
JointNets::plot.fasjem(result,
type = "taskspecific",
subID = 1,
layout = layout)
JointNets::plot.fasjem(result,
type = "taskspecific",
subID = 2,
layout = layout)
}
library(JointNets)
demo(fasjem)
library(JointNets)
demo(wsimule)
library(JointNets)
demo(wsimule)
library(JointNets)
demo(wsimule)
library(JointNets)
data(ABIDE_aal116_timeseries)
label = colnames(ABIDE_aal116_timeseries[[1]])
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
document()
library(JointNets)
data(ABIDE_aal116_timeseries)
label = colnames(ABIDE_aal116_timeseries[[1]])
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
data(ABIDE_aal116_timeseries)
label = colnames(ABIDE_aal116_timeseries[[1]])
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
library(JointNets)
document()
library(JointNets)
data(ABIDE_aal116_timeseries)
label = colnames(ABIDE_aal116_timeseries[[1]])
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
color = as.integer(aal116coordinates$lobe)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
docu
document()
library(JointNets)
data(ABIDE_aal116_timeseries)
label = colnames(ABIDE_aal116_timeseries[[1]])
data(aal116coordinates)
layout = cbind(aal116coordinates$x.mni + 90,aal116coordinates$y.mni+126, aal116coordinates$z.mni+72)
result = simule(ABIDE_aal116_timeseries, 0.2, 1, covType = "cov", TRUE)
plotbrain(result, type = "task", neighbouroption = "task",
subID = NULL, index = NULL, layout = layout)
